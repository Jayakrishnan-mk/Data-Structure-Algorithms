// O(n²) - QUADRATIC TIME COMPLEXITY
// O(log n) - LOGARITHMIC TIME COMPLEXITY


// LINEAR SEARCH = TC - O(n)
//      = CHECKING EACH ELEMENT ONE BY ONE.
// BINARY SEARCH = TC - O(log n)
//      = INSTEAD OF ELIMINATING ONE ITEM AT A TIME, WE CAN ELIMINATE HALF OF THE ARRAY ITEMS AT A TIME
//      = BEST COMPARE B/W LINEAR SEARCH,
//      = ONLY APPLICABLE IF ARRAY IS SORTED


// BUBBLE SORT = TC - O(n²)
//       = FIRST PLACING LARGE VALUES TO THE END OF THE ARRAY WITH SWAPPING EACH ITEM
// SELECTION SORT = TC - O(n²)
//       = FIRST PLACING SMALL VALUES TO THE STARTING OF THE ARRAY AND SWAPPING AT THE END OF THE LOOP
//       = REDUCING THE NO. OF SWAPS COMPARE B/W BUBBLE SORT
// INSERTION SORT = TC - O(n²)
//       = START WITH THE SECOND ELEMENT AND COMPARE IT WITH THE PREVIOUS ELEMENTS.
// MERGE SORT = TC - O(n log n)
//       = DIVIDE AND CONQUER ALGORITHM
//       = SPLITTING THE ARRAY VALUES WITH RECURSION AND SORTING ARRAY AND MERGING THE VALUES
// QUICK SORT = TC - O(n log n)- average case. worst case- O(n²)
//       = DIVIDE AND CONQUER ALGORITHM
//       = SELECTING A PIVOT ELEMENT AND PARTITIONING THE ARRAY TO SUB ARRAYS
//       = ELEMENTS SMALLER THAN THE PIVOT TO THE LEFT
//       = AND ELEMENTS HIGHER THAN THE PIVOT TO THE RIGHT
//       = THEN IT RECURSIVELY SORT THE ARRAYS


// SINGLY LINKED LIST = TC - O
//    = IS AN EXCELLENT ALTERNATIVE TO ARRAY-WHEN INSERTION AND DELETION AT THE BEGINNING ARE FREQUENTLY REQUIRED.
//    = LINKED LIST HAS NO INDEX CONTAINS LIKE ARRAYS.
//